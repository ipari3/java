1. 상속
클래스와 인터페이스는 상속이 가능하며, extends나 implements 키워드를 사용하여 구현한다.
- extends: 클래스끼리나 인터페이스끼리 상속받을 때 사용
- implements: 클래스가 인터페이스를 상속받을 때 사용

추상클래스는 단일상속만 가능하고, 인터페이스는 다중상속이 가능하다.
- 단일상속: 부모클래스가 하나라는 뜻이다. 자식클래스는 여러개일 수 있다.
- 다중상속: 인터페이스를 여러개 상속받아 사용할 수 있다.

* 호출 순서: 자식클래스가 생성될 때는 부모클래스부터 실행되고 자식클래스가 실행된다.

2. 오버라이드, 추상메소드
부모클래스로부터 상속받은 메소드의 틀은 유지하고 내용을 바꾸는 것이다.
추상메소드도 오버라이드를 이용하며, 일반 메소드와 달리 아무 구현도 되어있지 않다.
반면 오버라이드 하지 않는 메소드는 자식클래스에서 다시 구현할 필요가 없다.

자식클래스에서 @Override 어노테이션을 명시하며, 이는 오타를 방지하는데 효과적이다.
* super: 오버라이드를 하지만 부모클래스 메소드도 사용하고 싶으면 super 키워드를 사용한다.
(예시)
public abstract class ParentClass {
    ...
    public void method1() {
        System.out.println("INHERITANCE");
    }
    
    public void method2() {
        System.out.println("PARENT");
    }
    
    public abstract void method3();
}

public abstract class ChildClass extends ParentClass {
    ...
    @Override
    public void method2() {
        super.method1();
        System.out.println("CHILD");
    }
    
    @Override
    public void method3() {
        System.out.println("ABSTRACT");
    }
}

* 오버로드: 메소드 이름은 같고 매개변수의 개수가 다르게 정의하는 것이다.

3. 인터페이스
추상클래스와 인터페이스 모두 구현되지 않은 틀이며, 다른 클래스에서 구현이 완성된다.
- 추상클래스: is. 자식클래스 자체에 대한 틀이다. 단일 상속만 가능하다.
- 인터페이스: has. 일부 클래스들의 공통 성질에 대한 틀이다. 다중 상속이 가능하다.
(예시) Creature 추상클래스를 상속받는 Human과 Animal 추상클래스
// Human 추상클래스는 Creature 클래스와 Talkable 인터페이스를 상속받는다.
// Animal 추상클래스는 Talkable 기능이 필요없으므로 Creature에 포함되지 않고 인터페이스로 따로 뺀다.
public interface Talkable {
    abstract void talk();
}

public abstract class Human extends Creature implements Talkable {
    ...
    @Override
    public void talk() {
        System.out.println("talk talk talk.");
    }
}

(예시) Human 추상클래스를 상속받는 Jinsan 일반클래스
// 추상클래스와 달리, 인터페이스는 여러 개(Programmer, Swimable)를 상속받을 수 있다.
public class Jinsan extends Human implements Programmer, Swimable {
    ...
}
