1. 기본 타입
- 정수
(예시)
byte n = 100; // -128 ~ 127 (1바이트 = 8비트)
short n = 100; // 대략 ±3만 (2바이트)
int n = 100; // 대략 ±2*10^9 (3바이트)
long n = 100L; // 뒤에 L을 붙여야 한다. (대문자 권장) (4바이트)
- 소수
(예시)
float x = 3.14F; // 뒤에 F(혹은 f)를 붙여야 한다.
double x = 3.14;
- 기타
(예시)
boolean isnum = true; // true or false (파이썬과 다르게 소문자로 시작)
char c = 'A'; // 문자, 아스키코드 (파이썬과 다르게 문자열과 구분된다.)

* 캐스팅
기본 타입의 크기는 char < int < long < float < double 순이다.
큰 타입은 작은 타입의 값을 바로 받을 수 있지만, 작은 타입은 캐스팅을 통해 받을 수 있다.
(예시)
int i = 10;
double d = 3.14;
double conv1 = i; // 10.0
int conv2 = (int) d; // 3
int error = d; // 에러

* 래퍼 클래스
기본 타입을 객체로 다루기 위해 사용하는 클래스를 wrapper class라고 한다.
대부분 기본 타입의 첫 문자를 대문자로 쓴 것을 이름으로 가지며,
int와 char만 각각 Integer, Character로 이름을 갖는다.
(예시)
Integer a = new Integer(10); // 박싱
int b = a.intValue(); // 언박싱

Integer a = 10; // 오토박싱
int b = a; // 오토언박싱

2. 참조 타입
class, interface 등이 있으며, new 키워드로 객체를 생성해서 사용한다.
단, String은 기본 타입처럼 사용한다.
(예시)
String s = "abc";
Pos p = new Pos();

3. 상수
클래스에서 static final 키워드로 선언하며, 초기화하면서 선언해야 한다.
- static 키워드
a. 정적이라는 의미
클래스 객체를 생성하지 않아도 메모리에 할당되어 있으며, 프로그램 종료시에 해제된다.
따라서 객체를 생성하지 않아도 접근 가능하다.
객체가 할당되는 heap 영역과 대비되며, heap 영역은 GC의 관리를 받고, static 영역은 그렇지 않다.
아래에 나올 final 키워드가 값을 잠그는 용도라면, static은 메모리 주소를 잠그며 이것을 정적이라고 표현한다.
b. 공유라는 기능
메모리 주소가 고정되므로 해당 변수를 어디서 사용하든 해당 메모리 주소에 대해 수행한다.
어떤 메소드에서 static 변수를 조작하면, 다른 메소드도 영향을 받는다.
c. 선언 위치
따라서 static 변수는 클래스 메소드 외부에 선언한다.
- final 키워드
값이 정해지면 변경이 불가하다.
(예시)
public class Class1 {
    public static final int ZERO = 0;
    ...
}

* MATH.PI와 MATH.E도 상수로 지정되어 있다.

4. 배열
- new 키워드로 선언 (자릿수 혹은 리터럴을 지정)
(예시)
int [] nums = new int[4]; // {0, 0, 0, 0}. 자릿수만 입력하면 default 값으로 초기화.
nums = new int[]{2, 3, 4} // {2, 3, 4}로 재초기화. 길이가 달라도 된다.
nums[0] = 1; // 변경 가능

C와는 다르게 자릿수에 초기화된 정수 변수를 넣을 수 있다.
(예시)
int n = 4;
int [] nums = new int[n]; // n이 값을 가지고 있어야 하며 byte, short, int형 중 하나여야 한다. (long은 불가능)

- 리터럴 대입하여 선언 (선언 시에는 리터럴을 대입할 수 있다. 하지만 재초기화는 new 키워드를 이용해야 한다.)
(예시)
int[] nums = {1, 2, 3}; // 초기화와 함께 선언된다. (파이썬과 달리 대괄호가 아니라 중괄호다.)
nums[0] = 2; // 변경 가능
nums = new int[]{2, 3, 4, 5}; // 길이가 달라도 됨.
nums = {2, 3, 4, 5}; // 에러
